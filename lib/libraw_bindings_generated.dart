// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/libraw.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class FlutterLibRawBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterLibRawBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterLibRawBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Uint8> libraw_strerror(
    int errorcode,
  ) {
    return _libraw_strerror(
      errorcode,
    );
  }

  late final _libraw_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Int)>>(
          'libraw_strerror');
  late final _libraw_strerror =
      _libraw_strerrorPtr.asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<ffi.Uint8> libraw_strprogress(
    LibRaw_progress arg0,
  ) {
    return _libraw_strprogress(
      arg0.value,
    );
  }

  late final _libraw_strprogressPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.UnsignedInt)>>(
      'libraw_strprogress');
  late final _libraw_strprogress =
      _libraw_strprogressPtr.asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  /// LibRaw C API
  ffi.Pointer<libraw_data_t> libraw_init(
    int flags,
  ) {
    return _libraw_init(
      flags,
    );
  }

  late final _libraw_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<libraw_data_t> Function(ffi.UnsignedInt)>>('libraw_init');
  late final _libraw_init =
      _libraw_initPtr.asFunction<ffi.Pointer<libraw_data_t> Function(int)>();

  int libraw_open_file(
    ffi.Pointer<libraw_data_t> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _libraw_open_file(
      arg0,
      arg1,
    );
  }

  late final _libraw_open_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<libraw_data_t>,
              ffi.Pointer<ffi.Uint8>)>>('libraw_open_file');
  late final _libraw_open_file = _libraw_open_filePtr.asFunction<
      int Function(ffi.Pointer<libraw_data_t>, ffi.Pointer<ffi.Uint8>)>();

  int libraw_open_buffer(
    ffi.Pointer<libraw_data_t> arg0,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _libraw_open_buffer(
      arg0,
      buffer,
      size,
    );
  }

  late final _libraw_open_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<libraw_data_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('libraw_open_buffer');
  late final _libraw_open_buffer = _libraw_open_bufferPtr.asFunction<
      int Function(ffi.Pointer<libraw_data_t>, ffi.Pointer<ffi.Void>, int)>();

  int libraw_open_bayer(
    ffi.Pointer<libraw_data_t> lr,
    ffi.Pointer<ffi.UnsignedChar> data,
    int datalen,
    int _raw_width,
    int _raw_height,
    int _left_margin,
    int _top_margin,
    int _right_margin,
    int _bottom_margin,
    int procflags,
    int bayer_battern,
    int unused_bits,
    int otherflags,
    int black_level,
  ) {
    return _libraw_open_bayer(
      lr,
      data,
      datalen,
      _raw_width,
      _raw_height,
      _left_margin,
      _top_margin,
      _right_margin,
      _bottom_margin,
      procflags,
      bayer_battern,
      unused_bits,
      otherflags,
      black_level,
    );
  }

  late final _libraw_open_bayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<libraw_data_t>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ushort,
              ushort,
              ushort,
              ushort,
              ushort,
              ushort,
              ffi.UnsignedChar,
              ffi.UnsignedChar,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('libraw_open_bayer');
  late final _libraw_open_bayer = _libraw_open_bayerPtr.asFunction<
      int Function(ffi.Pointer<libraw_data_t>, ffi.Pointer<ffi.UnsignedChar>,
          int, int, int, int, int, int, int, int, int, int, int, int)>();

  int libraw_unpack(
    ffi.Pointer<libraw_data_t> arg0,
  ) {
    return _libraw_unpack(
      arg0,
    );
  }

  late final _libraw_unpackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libraw_data_t>)>>(
          'libraw_unpack');
  late final _libraw_unpack =
      _libraw_unpackPtr.asFunction<int Function(ffi.Pointer<libraw_data_t>)>();

  int libraw_unpack_thumb(
    ffi.Pointer<libraw_data_t> arg0,
  ) {
    return _libraw_unpack_thumb(
      arg0,
    );
  }

  late final _libraw_unpack_thumbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libraw_data_t>)>>(
          'libraw_unpack_thumb');
  late final _libraw_unpack_thumb = _libraw_unpack_thumbPtr
      .asFunction<int Function(ffi.Pointer<libraw_data_t>)>();

  int libraw_unpack_thumb_ex(
    ffi.Pointer<libraw_data_t> arg0,
    int arg1,
  ) {
    return _libraw_unpack_thumb_ex(
      arg0,
      arg1,
    );
  }

  late final _libraw_unpack_thumb_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<libraw_data_t>, ffi.Int)>>('libraw_unpack_thumb_ex');
  late final _libraw_unpack_thumb_ex = _libraw_unpack_thumb_exPtr
      .asFunction<int Function(ffi.Pointer<libraw_data_t>, int)>();

  void libraw_recycle_datastream(
    ffi.Pointer<libraw_data_t> arg0,
  ) {
    return _libraw_recycle_datastream(
      arg0,
    );
  }

  late final _libraw_recycle_datastreamPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libraw_data_t>)>>(
      'libraw_recycle_datastream');
  late final _libraw_recycle_datastream = _libraw_recycle_datastreamPtr
      .asFunction<void Function(ffi.Pointer<libraw_data_t>)>();

  void libraw_recycle(
    ffi.Pointer<libraw_data_t> arg0,
  ) {
    return _libraw_recycle(
      arg0,
    );
  }

  late final _libraw_recyclePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libraw_data_t>)>>(
      'libraw_recycle');
  late final _libraw_recycle = _libraw_recyclePtr
      .asFunction<void Function(ffi.Pointer<libraw_data_t>)>();

  void libraw_close(
    ffi.Pointer<libraw_data_t> arg0,
  ) {
    return _libraw_close(
      arg0,
    );
  }

  late final _libraw_closePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libraw_data_t>)>>(
      'libraw_close');
  late final _libraw_close =
      _libraw_closePtr.asFunction<void Function(ffi.Pointer<libraw_data_t>)>();

  void libraw_subtract_black(
    ffi.Pointer<libraw_data_t> arg0,
  ) {
    return _libraw_subtract_black(
      arg0,
    );
  }

  late final _libraw_subtract_blackPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libraw_data_t>)>>(
      'libraw_subtract_black');
  late final _libraw_subtract_black = _libraw_subtract_blackPtr
      .asFunction<void Function(ffi.Pointer<libraw_data_t>)>();

  int libraw_raw2image(
    ffi.Pointer<libraw_data_t> arg0,
  ) {
    return _libraw_raw2image(
      arg0,
    );
  }

  late final _libraw_raw2imagePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libraw_data_t>)>>(
          'libraw_raw2image');
  late final _libraw_raw2image = _libraw_raw2imagePtr
      .asFunction<int Function(ffi.Pointer<libraw_data_t>)>();

  void libraw_free_image(
    ffi.Pointer<libraw_data_t> arg0,
  ) {
    return _libraw_free_image(
      arg0,
    );
  }

  late final _libraw_free_imagePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libraw_data_t>)>>(
      'libraw_free_image');
  late final _libraw_free_image = _libraw_free_imagePtr
      .asFunction<void Function(ffi.Pointer<libraw_data_t>)>();

  /// version helpers
  ffi.Pointer<ffi.Uint8> libraw_version() {
    return _libraw_version();
  }

  late final _libraw_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function()>>(
          'libraw_version');
  late final _libraw_version =
      _libraw_versionPtr.asFunction<ffi.Pointer<ffi.Uint8> Function()>();

  int libraw_versionNumber() {
    return _libraw_versionNumber();
  }

  late final _libraw_versionNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('libraw_versionNumber');
  late final _libraw_versionNumber =
      _libraw_versionNumberPtr.asFunction<int Function()>();

  /// Camera list
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> libraw_cameraList() {
    return _libraw_cameraList();
  }

  late final _libraw_cameraListPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Uint8>> Function()>>(
      'libraw_cameraList');
  late final _libraw_cameraList = _libraw_cameraListPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Uint8>> Function()>();

  int libraw_cameraCount() {
    return _libraw_cameraCount();
  }

  late final _libraw_cameraCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('libraw_cameraCount');
  late final _libraw_cameraCount =
      _libraw_cameraCountPtr.asFunction<int Function()>();

  /// helpers
  void libraw_set_exifparser_handler(
    ffi.Pointer<libraw_data_t> arg0,
    exif_parser_callback cb,
    ffi.Pointer<ffi.Void> datap,
  ) {
    return _libraw_set_exifparser_handler(
      arg0,
      cb,
      datap,
    );
  }

  late final _libraw_set_exifparser_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<libraw_data_t>, exif_parser_callback,
              ffi.Pointer<ffi.Void>)>>('libraw_set_exifparser_handler');
  late final _libraw_set_exifparser_handler =
      _libraw_set_exifparser_handlerPtr.asFunction<
          void Function(ffi.Pointer<libraw_data_t>, exif_parser_callback,
              ffi.Pointer<ffi.Void>)>();

  void libraw_set_dataerror_handler(
    ffi.Pointer<libraw_data_t> arg0,
    data_callback func,
    ffi.Pointer<ffi.Void> datap,
  ) {
    return _libraw_set_dataerror_handler(
      arg0,
      func,
      datap,
    );
  }

  late final _libraw_set_dataerror_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<libraw_data_t>, data_callback,
              ffi.Pointer<ffi.Void>)>>('libraw_set_dataerror_handler');
  late final _libraw_set_dataerror_handler =
      _libraw_set_dataerror_handlerPtr.asFunction<
          void Function(ffi.Pointer<libraw_data_t>, data_callback,
              ffi.Pointer<ffi.Void>)>();

  void libraw_set_progress_handler(
    ffi.Pointer<libraw_data_t> arg0,
    progress_callback cb,
    ffi.Pointer<ffi.Void> datap,
  ) {
    return _libraw_set_progress_handler(
      arg0,
      cb,
      datap,
    );
  }

  late final _libraw_set_progress_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<libraw_data_t>, progress_callback,
              ffi.Pointer<ffi.Void>)>>('libraw_set_progress_handler');
  late final _libraw_set_progress_handler =
      _libraw_set_progress_handlerPtr.asFunction<
          void Function(ffi.Pointer<libraw_data_t>, progress_callback,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Uint8> libraw_unpack_function_name(
    ffi.Pointer<libraw_data_t> lr,
  ) {
    return _libraw_unpack_function_name(
      lr,
    );
  }

  late final _libraw_unpack_function_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<libraw_data_t>)>>('libraw_unpack_function_name');
  late final _libraw_unpack_function_name =
      _libraw_unpack_function_namePtr.asFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<libraw_data_t>)>();

  int libraw_get_decoder_info(
    ffi.Pointer<libraw_data_t> lr,
    ffi.Pointer<libraw_decoder_info_t> d,
  ) {
    return _libraw_get_decoder_info(
      lr,
      d,
    );
  }

  late final _libraw_get_decoder_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<libraw_data_t>,
              ffi.Pointer<libraw_decoder_info_t>)>>('libraw_get_decoder_info');
  late final _libraw_get_decoder_info = _libraw_get_decoder_infoPtr.asFunction<
      int Function(
          ffi.Pointer<libraw_data_t>, ffi.Pointer<libraw_decoder_info_t>)>();

  int libraw_COLOR(
    ffi.Pointer<libraw_data_t> arg0,
    int row,
    int col,
  ) {
    return _libraw_COLOR(
      arg0,
      row,
      col,
    );
  }

  late final _libraw_COLORPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<libraw_data_t>, ffi.Int, ffi.Int)>>('libraw_COLOR');
  late final _libraw_COLOR = _libraw_COLORPtr
      .asFunction<int Function(ffi.Pointer<libraw_data_t>, int, int)>();

  int libraw_capabilities() {
    return _libraw_capabilities();
  }

  late final _libraw_capabilitiesPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'libraw_capabilities');
  late final _libraw_capabilities =
      _libraw_capabilitiesPtr.asFunction<int Function()>();

  /// DCRAW compatibility
  int libraw_adjust_sizes_info_only(
    ffi.Pointer<libraw_data_t> arg0,
  ) {
    return _libraw_adjust_sizes_info_only(
      arg0,
    );
  }

  late final _libraw_adjust_sizes_info_onlyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libraw_data_t>)>>(
          'libraw_adjust_sizes_info_only');
  late final _libraw_adjust_sizes_info_only = _libraw_adjust_sizes_info_onlyPtr
      .asFunction<int Function(ffi.Pointer<libraw_data_t>)>();

  int libraw_dcraw_ppm_tiff_writer(
    ffi.Pointer<libraw_data_t> lr,
    ffi.Pointer<ffi.Uint8> filename,
  ) {
    return _libraw_dcraw_ppm_tiff_writer(
      lr,
      filename,
    );
  }

  late final _libraw_dcraw_ppm_tiff_writerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<libraw_data_t>,
              ffi.Pointer<ffi.Uint8>)>>('libraw_dcraw_ppm_tiff_writer');
  late final _libraw_dcraw_ppm_tiff_writer =
      _libraw_dcraw_ppm_tiff_writerPtr.asFunction<
          int Function(ffi.Pointer<libraw_data_t>, ffi.Pointer<ffi.Uint8>)>();

  int libraw_dcraw_thumb_writer(
    ffi.Pointer<libraw_data_t> lr,
    ffi.Pointer<ffi.Uint8> fname,
  ) {
    return _libraw_dcraw_thumb_writer(
      lr,
      fname,
    );
  }

  late final _libraw_dcraw_thumb_writerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<libraw_data_t>,
              ffi.Pointer<ffi.Uint8>)>>('libraw_dcraw_thumb_writer');
  late final _libraw_dcraw_thumb_writer =
      _libraw_dcraw_thumb_writerPtr.asFunction<
          int Function(ffi.Pointer<libraw_data_t>, ffi.Pointer<ffi.Uint8>)>();

  int libraw_dcraw_process(
    ffi.Pointer<libraw_data_t> lr,
  ) {
    return _libraw_dcraw_process(
      lr,
    );
  }

  late final _libraw_dcraw_processPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libraw_data_t>)>>(
          'libraw_dcraw_process');
  late final _libraw_dcraw_process = _libraw_dcraw_processPtr
      .asFunction<int Function(ffi.Pointer<libraw_data_t>)>();

  ffi.Pointer<libraw_processed_image_t> libraw_dcraw_make_mem_image(
    ffi.Pointer<libraw_data_t> lr,
    ffi.Pointer<ffi.Int> errc,
  ) {
    return _libraw_dcraw_make_mem_image(
      lr,
      errc,
    );
  }

  late final _libraw_dcraw_make_mem_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<libraw_processed_image_t> Function(
              ffi.Pointer<libraw_data_t>,
              ffi.Pointer<ffi.Int>)>>('libraw_dcraw_make_mem_image');
  late final _libraw_dcraw_make_mem_image =
      _libraw_dcraw_make_mem_imagePtr.asFunction<
          ffi.Pointer<libraw_processed_image_t> Function(
              ffi.Pointer<libraw_data_t>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<libraw_processed_image_t> libraw_dcraw_make_mem_thumb(
    ffi.Pointer<libraw_data_t> lr,
    ffi.Pointer<ffi.Int> errc,
  ) {
    return _libraw_dcraw_make_mem_thumb(
      lr,
      errc,
    );
  }

  late final _libraw_dcraw_make_mem_thumbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<libraw_processed_image_t> Function(
              ffi.Pointer<libraw_data_t>,
              ffi.Pointer<ffi.Int>)>>('libraw_dcraw_make_mem_thumb');
  late final _libraw_dcraw_make_mem_thumb =
      _libraw_dcraw_make_mem_thumbPtr.asFunction<
          ffi.Pointer<libraw_processed_image_t> Function(
              ffi.Pointer<libraw_data_t>, ffi.Pointer<ffi.Int>)>();

  void libraw_dcraw_clear_mem(
    ffi.Pointer<libraw_processed_image_t> arg0,
  ) {
    return _libraw_dcraw_clear_mem(
      arg0,
    );
  }

  late final _libraw_dcraw_clear_memPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<libraw_processed_image_t>)>>(
      'libraw_dcraw_clear_mem');
  late final _libraw_dcraw_clear_mem = _libraw_dcraw_clear_memPtr
      .asFunction<void Function(ffi.Pointer<libraw_processed_image_t>)>();

  /// getters/setters used by 3DLut Creator
  void libraw_set_demosaic(
    ffi.Pointer<libraw_data_t> lr,
    int value,
  ) {
    return _libraw_set_demosaic(
      lr,
      value,
    );
  }

  late final _libraw_set_demosaicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<libraw_data_t>, ffi.Int)>>('libraw_set_demosaic');
  late final _libraw_set_demosaic = _libraw_set_demosaicPtr
      .asFunction<void Function(ffi.Pointer<libraw_data_t>, int)>();

  void libraw_set_output_color(
    ffi.Pointer<libraw_data_t> lr,
    int value,
  ) {
    return _libraw_set_output_color(
      lr,
      value,
    );
  }

  late final _libraw_set_output_colorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<libraw_data_t>, ffi.Int)>>('libraw_set_output_color');
  late final _libraw_set_output_color = _libraw_set_output_colorPtr
      .asFunction<void Function(ffi.Pointer<libraw_data_t>, int)>();

  void libraw_set_adjust_maximum_thr(
    ffi.Pointer<libraw_data_t> lr,
    double value,
  ) {
    return _libraw_set_adjust_maximum_thr(
      lr,
      value,
    );
  }

  late final _libraw_set_adjust_maximum_thrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<libraw_data_t>,
              ffi.Float)>>('libraw_set_adjust_maximum_thr');
  late final _libraw_set_adjust_maximum_thr = _libraw_set_adjust_maximum_thrPtr
      .asFunction<void Function(ffi.Pointer<libraw_data_t>, double)>();

  void libraw_set_user_mul(
    ffi.Pointer<libraw_data_t> lr,
    int index,
    double val,
  ) {
    return _libraw_set_user_mul(
      lr,
      index,
      val,
    );
  }

  late final _libraw_set_user_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<libraw_data_t>, ffi.Int,
              ffi.Float)>>('libraw_set_user_mul');
  late final _libraw_set_user_mul = _libraw_set_user_mulPtr
      .asFunction<void Function(ffi.Pointer<libraw_data_t>, int, double)>();

  void libraw_set_output_bps(
    ffi.Pointer<libraw_data_t> lr,
    int value,
  ) {
    return _libraw_set_output_bps(
      lr,
      value,
    );
  }

  late final _libraw_set_output_bpsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<libraw_data_t>, ffi.Int)>>('libraw_set_output_bps');
  late final _libraw_set_output_bps = _libraw_set_output_bpsPtr
      .asFunction<void Function(ffi.Pointer<libraw_data_t>, int)>();

  void libraw_set_gamma(
    ffi.Pointer<libraw_data_t> lr,
    int index,
    double value,
  ) {
    return _libraw_set_gamma(
      lr,
      index,
      value,
    );
  }

  late final _libraw_set_gammaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<libraw_data_t>, ffi.Int,
              ffi.Float)>>('libraw_set_gamma');
  late final _libraw_set_gamma = _libraw_set_gammaPtr
      .asFunction<void Function(ffi.Pointer<libraw_data_t>, int, double)>();

  void libraw_set_no_auto_bright(
    ffi.Pointer<libraw_data_t> lr,
    int value,
  ) {
    return _libraw_set_no_auto_bright(
      lr,
      value,
    );
  }

  late final _libraw_set_no_auto_brightPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<libraw_data_t>,
              ffi.Int)>>('libraw_set_no_auto_bright');
  late final _libraw_set_no_auto_bright = _libraw_set_no_auto_brightPtr
      .asFunction<void Function(ffi.Pointer<libraw_data_t>, int)>();

  void libraw_set_bright(
    ffi.Pointer<libraw_data_t> lr,
    double value,
  ) {
    return _libraw_set_bright(
      lr,
      value,
    );
  }

  late final _libraw_set_brightPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<libraw_data_t>, ffi.Float)>>('libraw_set_bright');
  late final _libraw_set_bright = _libraw_set_brightPtr
      .asFunction<void Function(ffi.Pointer<libraw_data_t>, double)>();

  void libraw_set_highlight(
    ffi.Pointer<libraw_data_t> lr,
    int value,
  ) {
    return _libraw_set_highlight(
      lr,
      value,
    );
  }

  late final _libraw_set_highlightPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<libraw_data_t>, ffi.Int)>>('libraw_set_highlight');
  late final _libraw_set_highlight = _libraw_set_highlightPtr
      .asFunction<void Function(ffi.Pointer<libraw_data_t>, int)>();

  void libraw_set_fbdd_noiserd(
    ffi.Pointer<libraw_data_t> lr,
    int value,
  ) {
    return _libraw_set_fbdd_noiserd(
      lr,
      value,
    );
  }

  late final _libraw_set_fbdd_noiserdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<libraw_data_t>, ffi.Int)>>('libraw_set_fbdd_noiserd');
  late final _libraw_set_fbdd_noiserd = _libraw_set_fbdd_noiserdPtr
      .asFunction<void Function(ffi.Pointer<libraw_data_t>, int)>();

  int libraw_get_raw_height(
    ffi.Pointer<libraw_data_t> lr,
  ) {
    return _libraw_get_raw_height(
      lr,
    );
  }

  late final _libraw_get_raw_heightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libraw_data_t>)>>(
          'libraw_get_raw_height');
  late final _libraw_get_raw_height = _libraw_get_raw_heightPtr
      .asFunction<int Function(ffi.Pointer<libraw_data_t>)>();

  int libraw_get_raw_width(
    ffi.Pointer<libraw_data_t> lr,
  ) {
    return _libraw_get_raw_width(
      lr,
    );
  }

  late final _libraw_get_raw_widthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libraw_data_t>)>>(
          'libraw_get_raw_width');
  late final _libraw_get_raw_width = _libraw_get_raw_widthPtr
      .asFunction<int Function(ffi.Pointer<libraw_data_t>)>();

  int libraw_get_iheight(
    ffi.Pointer<libraw_data_t> lr,
  ) {
    return _libraw_get_iheight(
      lr,
    );
  }

  late final _libraw_get_iheightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libraw_data_t>)>>(
          'libraw_get_iheight');
  late final _libraw_get_iheight = _libraw_get_iheightPtr
      .asFunction<int Function(ffi.Pointer<libraw_data_t>)>();

  int libraw_get_iwidth(
    ffi.Pointer<libraw_data_t> lr,
  ) {
    return _libraw_get_iwidth(
      lr,
    );
  }

  late final _libraw_get_iwidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libraw_data_t>)>>(
          'libraw_get_iwidth');
  late final _libraw_get_iwidth = _libraw_get_iwidthPtr
      .asFunction<int Function(ffi.Pointer<libraw_data_t>)>();

  double libraw_get_cam_mul(
    ffi.Pointer<libraw_data_t> lr,
    int index,
  ) {
    return _libraw_get_cam_mul(
      lr,
      index,
    );
  }

  late final _libraw_get_cam_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<libraw_data_t>, ffi.Int)>>('libraw_get_cam_mul');
  late final _libraw_get_cam_mul = _libraw_get_cam_mulPtr
      .asFunction<double Function(ffi.Pointer<libraw_data_t>, int)>();

  double libraw_get_pre_mul(
    ffi.Pointer<libraw_data_t> lr,
    int index,
  ) {
    return _libraw_get_pre_mul(
      lr,
      index,
    );
  }

  late final _libraw_get_pre_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<libraw_data_t>, ffi.Int)>>('libraw_get_pre_mul');
  late final _libraw_get_pre_mul = _libraw_get_pre_mulPtr
      .asFunction<double Function(ffi.Pointer<libraw_data_t>, int)>();

  double libraw_get_rgb_cam(
    ffi.Pointer<libraw_data_t> lr,
    int index1,
    int index2,
  ) {
    return _libraw_get_rgb_cam(
      lr,
      index1,
      index2,
    );
  }

  late final _libraw_get_rgb_camPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<libraw_data_t>, ffi.Int,
              ffi.Int)>>('libraw_get_rgb_cam');
  late final _libraw_get_rgb_cam = _libraw_get_rgb_camPtr
      .asFunction<double Function(ffi.Pointer<libraw_data_t>, int, int)>();

  int libraw_get_color_maximum(
    ffi.Pointer<libraw_data_t> lr,
  ) {
    return _libraw_get_color_maximum(
      lr,
    );
  }

  late final _libraw_get_color_maximumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libraw_data_t>)>>(
          'libraw_get_color_maximum');
  late final _libraw_get_color_maximum = _libraw_get_color_maximumPtr
      .asFunction<int Function(ffi.Pointer<libraw_data_t>)>();

  void libraw_set_output_tif(
    ffi.Pointer<libraw_data_t> lr,
    int value,
  ) {
    return _libraw_set_output_tif(
      lr,
      value,
    );
  }

  late final _libraw_set_output_tifPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<libraw_data_t>, ffi.Int)>>('libraw_set_output_tif');
  late final _libraw_set_output_tif = _libraw_set_output_tifPtr
      .asFunction<void Function(ffi.Pointer<libraw_data_t>, int)>();

  ffi.Pointer<libraw_iparams_t> libraw_get_iparams(
    ffi.Pointer<libraw_data_t> lr,
  ) {
    return _libraw_get_iparams(
      lr,
    );
  }

  late final _libraw_get_iparamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<libraw_iparams_t> Function(
              ffi.Pointer<libraw_data_t>)>>('libraw_get_iparams');
  late final _libraw_get_iparams = _libraw_get_iparamsPtr.asFunction<
      ffi.Pointer<libraw_iparams_t> Function(ffi.Pointer<libraw_data_t>)>();

  ffi.Pointer<libraw_lensinfo_t> libraw_get_lensinfo(
    ffi.Pointer<libraw_data_t> lr,
  ) {
    return _libraw_get_lensinfo(
      lr,
    );
  }

  late final _libraw_get_lensinfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<libraw_lensinfo_t> Function(
              ffi.Pointer<libraw_data_t>)>>('libraw_get_lensinfo');
  late final _libraw_get_lensinfo = _libraw_get_lensinfoPtr.asFunction<
      ffi.Pointer<libraw_lensinfo_t> Function(ffi.Pointer<libraw_data_t>)>();

  ffi.Pointer<libraw_imgother_t> libraw_get_imgother(
    ffi.Pointer<libraw_data_t> lr,
  ) {
    return _libraw_get_imgother(
      lr,
    );
  }

  late final _libraw_get_imgotherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<libraw_imgother_t> Function(
              ffi.Pointer<libraw_data_t>)>>('libraw_get_imgother');
  late final _libraw_get_imgother = _libraw_get_imgotherPtr.asFunction<
      ffi.Pointer<libraw_imgother_t> Function(ffi.Pointer<libraw_data_t>)>();
}

enum LibRaw_progress {
  LIBRAW_PROGRESS_START(0),
  LIBRAW_PROGRESS_OPEN(1),
  LIBRAW_PROGRESS_IDENTIFY(2),
  LIBRAW_PROGRESS_SIZE_ADJUST(4),
  LIBRAW_PROGRESS_LOAD_RAW(8),
  LIBRAW_PROGRESS_RAW2_IMAGE(16),
  LIBRAW_PROGRESS_REMOVE_ZEROES(32),
  LIBRAW_PROGRESS_BAD_PIXELS(64),
  LIBRAW_PROGRESS_DARK_FRAME(128),
  LIBRAW_PROGRESS_FOVEON_INTERPOLATE(256),
  LIBRAW_PROGRESS_SCALE_COLORS(512),
  LIBRAW_PROGRESS_PRE_INTERPOLATE(1024),
  LIBRAW_PROGRESS_INTERPOLATE(2048),
  LIBRAW_PROGRESS_MIX_GREEN(4096),
  LIBRAW_PROGRESS_MEDIAN_FILTER(8192),
  LIBRAW_PROGRESS_HIGHLIGHTS(16384),
  LIBRAW_PROGRESS_FUJI_ROTATE(32768),
  LIBRAW_PROGRESS_FLIP(65536),
  LIBRAW_PROGRESS_APPLY_PROFILE(131072),
  LIBRAW_PROGRESS_CONVERT_RGB(262144),
  LIBRAW_PROGRESS_STRETCH(524288),

  /// reserved
  LIBRAW_PROGRESS_STAGE20(1048576),
  LIBRAW_PROGRESS_STAGE21(2097152),
  LIBRAW_PROGRESS_STAGE22(4194304),
  LIBRAW_PROGRESS_STAGE23(8388608),
  LIBRAW_PROGRESS_STAGE24(16777216),
  LIBRAW_PROGRESS_STAGE25(33554432),
  LIBRAW_PROGRESS_STAGE26(67108864),
  LIBRAW_PROGRESS_STAGE27(134217728),
  LIBRAW_PROGRESS_THUMB_LOAD(268435456),
  LIBRAW_PROGRESS_TRESERVED1(536870912),
  LIBRAW_PROGRESS_TRESERVED2(1073741824);

  final int value;
  const LibRaw_progress(this.value);

  static LibRaw_progress fromValue(int value) => switch (value) {
        0 => LIBRAW_PROGRESS_START,
        1 => LIBRAW_PROGRESS_OPEN,
        2 => LIBRAW_PROGRESS_IDENTIFY,
        4 => LIBRAW_PROGRESS_SIZE_ADJUST,
        8 => LIBRAW_PROGRESS_LOAD_RAW,
        16 => LIBRAW_PROGRESS_RAW2_IMAGE,
        32 => LIBRAW_PROGRESS_REMOVE_ZEROES,
        64 => LIBRAW_PROGRESS_BAD_PIXELS,
        128 => LIBRAW_PROGRESS_DARK_FRAME,
        256 => LIBRAW_PROGRESS_FOVEON_INTERPOLATE,
        512 => LIBRAW_PROGRESS_SCALE_COLORS,
        1024 => LIBRAW_PROGRESS_PRE_INTERPOLATE,
        2048 => LIBRAW_PROGRESS_INTERPOLATE,
        4096 => LIBRAW_PROGRESS_MIX_GREEN,
        8192 => LIBRAW_PROGRESS_MEDIAN_FILTER,
        16384 => LIBRAW_PROGRESS_HIGHLIGHTS,
        32768 => LIBRAW_PROGRESS_FUJI_ROTATE,
        65536 => LIBRAW_PROGRESS_FLIP,
        131072 => LIBRAW_PROGRESS_APPLY_PROFILE,
        262144 => LIBRAW_PROGRESS_CONVERT_RGB,
        524288 => LIBRAW_PROGRESS_STRETCH,
        1048576 => LIBRAW_PROGRESS_STAGE20,
        2097152 => LIBRAW_PROGRESS_STAGE21,
        4194304 => LIBRAW_PROGRESS_STAGE22,
        8388608 => LIBRAW_PROGRESS_STAGE23,
        16777216 => LIBRAW_PROGRESS_STAGE24,
        33554432 => LIBRAW_PROGRESS_STAGE25,
        67108864 => LIBRAW_PROGRESS_STAGE26,
        134217728 => LIBRAW_PROGRESS_STAGE27,
        268435456 => LIBRAW_PROGRESS_THUMB_LOAD,
        536870912 => LIBRAW_PROGRESS_TRESERVED1,
        1073741824 => LIBRAW_PROGRESS_TRESERVED2,
        _ => throw ArgumentError("Unknown value for LibRaw_progress: $value"),
      };
}

final class libraw_data_t extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ushort>> image;

  external libraw_image_sizes_t sizes;

  external libraw_iparams_t idata;

  external libraw_lensinfo_t lens;

  external libraw_makernotes_t makernotes;

  external libraw_shootinginfo_t shootinginfo;

  external libraw_output_params_t params;

  external libraw_raw_unpack_params_t rawparams;

  @ffi.UnsignedInt()
  external int progress_flags;

  @ffi.UnsignedInt()
  external int process_warnings;

  external libraw_colordata_t color;

  external libraw_imgother_t other;

  external libraw_thumbnail_t thumbnail;

  external libraw_thumbnail_list_t thumbs_list;

  external libraw_rawdata_t rawdata;

  external ffi.Pointer<ffi.Void> parent_class;
}

typedef ushort = ffi.UnsignedShort;
typedef Dartushort = int;

final class libraw_image_sizes_t extends ffi.Struct {
  @ushort()
  external int raw_height;

  @ushort()
  external int raw_width;

  @ushort()
  external int height;

  @ushort()
  external int width;

  @ushort()
  external int top_margin;

  @ushort()
  external int left_margin;

  @ushort()
  external int iheight;

  @ushort()
  external int iwidth;

  @ffi.UnsignedInt()
  external int raw_pitch;

  @ffi.Double()
  external double pixel_aspect;

  @ffi.Int()
  external int flip;

  @ffi.Array.multi([8, 4])
  external ffi.Array<ffi.Array<ffi.Int>> mask;

  @ushort()
  external int raw_aspect;

  @ffi.Array.multi([2])
  external ffi.Array<libraw_raw_inset_crop_t> raw_inset_crops;
}

final class libraw_raw_inset_crop_t extends ffi.Struct {
  @ushort()
  external int cleft;

  @ushort()
  external int ctop;

  @ushort()
  external int cwidth;

  @ushort()
  external int cheight;
}

final class libraw_iparams_t extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint8> guard;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> make;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> model;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> software;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> normalized_make;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> normalized_model;

  @ffi.UnsignedInt()
  external int maker_index;

  @ffi.UnsignedInt()
  external int raw_count;

  @ffi.UnsignedInt()
  external int dng_version;

  @ffi.UnsignedInt()
  external int is_foveon;

  @ffi.Int()
  external int colors;

  @ffi.UnsignedInt()
  external int filters;

  @ffi.Array.multi([6, 6])
  external ffi.Array<ffi.Array<ffi.Uint8>> xtrans;

  @ffi.Array.multi([6, 6])
  external ffi.Array<ffi.Array<ffi.Uint8>> xtrans_abs;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint8> cdesc;

  @ffi.UnsignedInt()
  external int xmplen;

  external ffi.Pointer<ffi.Uint8> xmpdata;
}

final class libraw_lensinfo_t extends ffi.Struct {
  @ffi.Float()
  external double MinFocal;

  @ffi.Float()
  external double MaxFocal;

  @ffi.Float()
  external double MaxAp4MinFocal;

  @ffi.Float()
  external double MaxAp4MaxFocal;

  @ffi.Float()
  external double EXIF_MaxAp;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> LensMake;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> Lens;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> LensSerial;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> InternalLensSerial;

  @ushort()
  external int FocalLengthIn35mmFormat;

  external libraw_nikonlens_t nikon;

  external libraw_dnglens_t dng;

  external libraw_makernotes_lens_t makernotes;
}

final class libraw_nikonlens_t extends ffi.Struct {
  @ffi.Float()
  external double EffectiveMaxAp;

  @uchar()
  external int LensIDNumber;

  @uchar()
  external int LensFStops;

  @uchar()
  external int MCUVersion;

  @uchar()
  external int LensType;
}

typedef uchar = ffi.UnsignedChar;
typedef Dartuchar = int;

final class libraw_dnglens_t extends ffi.Struct {
  @ffi.Float()
  external double MinFocal;

  @ffi.Float()
  external double MaxFocal;

  @ffi.Float()
  external double MaxAp4MinFocal;

  @ffi.Float()
  external double MaxAp4MaxFocal;
}

final class libraw_makernotes_lens_t extends ffi.Struct {
  @ffi.UnsignedLongLong()
  external int LensID;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> Lens;

  /// to characterize the image circle the lens covers
  @ushort()
  external int LensFormat;

  /// 'male', lens itself
  @ushort()
  external int LensMount;

  @ffi.UnsignedLongLong()
  external int CamID;

  /// some of the sensor formats
  @ushort()
  external int CameraFormat;

  /// 'female', body throat
  @ushort()
  external int CameraMount;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> body;

  /// -1/0 is unknown; 1 is fixed focal; 2 is zoom
  @ffi.Short()
  external int FocalType;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> LensFeatures_pre;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> LensFeatures_suf;

  @ffi.Float()
  external double MinFocal;

  @ffi.Float()
  external double MaxFocal;

  @ffi.Float()
  external double MaxAp4MinFocal;

  @ffi.Float()
  external double MaxAp4MaxFocal;

  @ffi.Float()
  external double MinAp4MinFocal;

  @ffi.Float()
  external double MinAp4MaxFocal;

  @ffi.Float()
  external double MaxAp;

  @ffi.Float()
  external double MinAp;

  @ffi.Float()
  external double CurFocal;

  @ffi.Float()
  external double CurAp;

  @ffi.Float()
  external double MaxAp4CurFocal;

  @ffi.Float()
  external double MinAp4CurFocal;

  @ffi.Float()
  external double MinFocusDistance;

  @ffi.Float()
  external double FocusRangeIndex;

  @ffi.Float()
  external double LensFStops;

  @ffi.UnsignedLongLong()
  external int TeleconverterID;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> Teleconverter;

  @ffi.UnsignedLongLong()
  external int AdapterID;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> Adapter;

  @ffi.UnsignedLongLong()
  external int AttachmentID;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> Attachment;

  @ushort()
  external int FocalUnits;

  @ffi.Float()
  external double FocalLengthIn35mmFormat;
}

final class libraw_makernotes_t extends ffi.Struct {
  external libraw_canon_makernotes_t canon;

  external libraw_nikon_makernotes_t nikon;

  external libraw_hasselblad_makernotes_t hasselblad;

  external libraw_fuji_info_t fuji;

  external libraw_olympus_makernotes_t olympus;

  external libraw_sony_info_t sony;

  external libraw_kodak_makernotes_t kodak;

  external libraw_panasonic_makernotes_t panasonic;

  external libraw_pentax_makernotes_t pentax;

  external libraw_p1_makernotes_t phaseone;

  external libraw_ricoh_makernotes_t ricoh;

  external libraw_samsung_makernotes_t samsung;

  external libraw_metadata_common_t common;
}

final class libraw_canon_makernotes_t extends ffi.Struct {
  @ffi.Int()
  external int ColorDataVer;

  @ffi.Int()
  external int ColorDataSubVer;

  @ffi.Int()
  external int SpecularWhiteLevel;

  @ffi.Int()
  external int NormalWhiteLevel;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int> ChannelBlackLevel;

  @ffi.Int()
  external int AverageBlackLevel;

  /// multishot
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedInt> multishot;

  /// metering
  @ffi.Short()
  external int MeteringMode;

  @ffi.Short()
  external int SpotMeteringMode;

  @uchar()
  external int FlashMeteringMode;

  @ffi.Short()
  external int FlashExposureLock;

  @ffi.Short()
  external int ExposureMode;

  @ffi.Short()
  external int AESetting;

  /// stabilization
  @ffi.Short()
  external int ImageStabilization;

  /// flash
  @ffi.Short()
  external int FlashMode;

  @ffi.Short()
  external int FlashActivity;

  @ffi.Short()
  external int FlashBits;

  @ffi.Short()
  external int ManualFlashOutput;

  @ffi.Short()
  external int FlashOutput;

  @ffi.Short()
  external int FlashGuideNumber;

  /// drive
  @ffi.Short()
  external int ContinuousDrive;

  /// sensor
  @ffi.Short()
  external int SensorWidth;

  @ffi.Short()
  external int SensorHeight;

  @ffi.Int()
  external int AFMicroAdjMode;

  @ffi.Float()
  external double AFMicroAdjValue;

  @ffi.Short()
  external int MakernotesFlip;

  @ffi.Short()
  external int RecordMode;

  @ffi.Short()
  external int SRAWQuality;

  @ffi.UnsignedInt()
  external int wbi;

  @ffi.Short()
  external int RF_lensID;

  @ffi.Int()
  external int AutoLightingOptimizer;

  @ffi.Int()
  external int HighlightTonePriority;

  /// -1 = n/a            1 = Economy
  /// 2 = Normal         3 = Fine
  /// 4 = RAW            5 = Superfine
  /// 7 = CRAW         130 = Normal Movie, CRM LightRaw
  /// 131 = CRM  StandardRaw
  @ffi.Short()
  external int Quality;

  /// data compression curve
  /// 0 = OFF  1 = CLogV1 2 = CLogV2? 3 = CLogV3
  @ffi.Int()
  external int CanonLog;

  external libraw_area_t DefaultCropAbsolute;

  /// contains the image in proper aspect ratio?
  external libraw_area_t RecommendedImageArea;

  /// use this, when present, to estimate black levels?
  external libraw_area_t LeftOpticalBlack;

  external libraw_area_t UpperOpticalBlack;

  external libraw_area_t ActiveArea;

  /// AutoISO & BaseISO per ExifTool
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Short> ISOgain;
}

final class libraw_area_t extends ffi.Struct {
  /// top, left, bottom, right pixel coordinates, (0,0) is top left pixel;
  @ffi.Short()
  external int t;

  @ffi.Short()
  external int l;

  @ffi.Short()
  external int b;

  @ffi.Short()
  external int r;
}

final class libraw_nikon_makernotes_t extends ffi.Struct {
  @ffi.Double()
  external double ExposureBracketValue;

  @ushort()
  external int ActiveDLighting;

  @ushort()
  external int ShootingMode;

  /// stabilization
  @ffi.Array.multi([7])
  external ffi.Array<uchar> ImageStabilization;

  @uchar()
  external int VibrationReduction;

  @uchar()
  external int VRMode;

  /// flash
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Uint8> FlashSetting;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Uint8> FlashType;

  @ffi.Array.multi([4])
  external ffi.Array<uchar> FlashExposureCompensation;

  @ffi.Array.multi([4])
  external ffi.Array<uchar> ExternalFlashExposureComp;

  @ffi.Array.multi([4])
  external ffi.Array<uchar> FlashExposureBracketValue;

  @uchar()
  external int FlashMode;

  @ffi.SignedChar()
  external int FlashExposureCompensation2;

  @ffi.SignedChar()
  external int FlashExposureCompensation3;

  @ffi.SignedChar()
  external int FlashExposureCompensation4;

  @uchar()
  external int FlashSource;

  @ffi.Array.multi([2])
  external ffi.Array<uchar> FlashFirmware;

  @uchar()
  external int ExternalFlashFlags;

  @uchar()
  external int FlashControlCommanderMode;

  @uchar()
  external int FlashOutputAndCompensation;

  @uchar()
  external int FlashFocalLength;

  @uchar()
  external int FlashGNDistance;

  @ffi.Array.multi([4])
  external ffi.Array<uchar> FlashGroupControlMode;

  @ffi.Array.multi([4])
  external ffi.Array<uchar> FlashGroupOutputAndCompensation;

  @uchar()
  external int FlashColorFilter;

  /// NEF compression, comments follow those for ExifTool tag 0x0093:
  /// 1: Lossy (type 1)
  /// 2: Uncompressed
  /// 3: Lossless
  /// 4: Lossy (type 2)
  /// 5: Striped packed 12-bit
  /// 6: Uncompressed (14-bit reduced to 12-bit)
  /// 7: Unpacked 12-bit
  /// 8: Small raw
  /// 9: Packed 12-bit
  /// 10: Packed 14-bit
  /// 13: High Efficiency  (HE)
  /// 14: High Efficiency* (HE*)
  @ushort()
  external int NEFCompression;

  @ffi.Int()
  external int ExposureMode;

  @ffi.Int()
  external int ExposureProgram;

  @ffi.Int()
  external int nMEshots;

  @ffi.Int()
  external int MEgainOn;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> ME_WB;

  @uchar()
  external int AFFineTune;

  @uchar()
  external int AFFineTuneIndex;

  @ffi.Int8()
  external int AFFineTuneAdj;

  @ffi.UnsignedInt()
  external int LensDataVersion;

  @ffi.UnsignedInt()
  external int FlashInfoVersion;

  @ffi.UnsignedInt()
  external int ColorBalanceVersion;

  @uchar()
  external int key;

  @ffi.Array.multi([4])
  external ffi.Array<ushort> NEFBitDepth;

  /// 1 -> 1.3x; 2 -> DX; 3 -> 5:4; 4 -> 3:2; 6 ->
  /// 16:9; 11 -> FX uncropped; 12 -> DX uncropped;
  /// 17 -> 1:1
  @ushort()
  external int HighSpeedCropFormat;

  external libraw_sensor_highspeed_crop_t SensorHighSpeedCrop;

  @ushort()
  external int SensorWidth;

  @ushort()
  external int SensorHeight;

  @ushort()
  external int Active_D_Lighting;

  @ffi.UnsignedInt()
  external int ShotInfoVersion;

  @ffi.Short()
  external int MakernotesFlip;

  /// positive is clockwise, CW
  @ffi.Double()
  external double RollAngle;

  /// positive is upwords
  @ffi.Double()
  external double PitchAngle;

  /// positive is to the right
  @ffi.Double()
  external double YawAngle;
}

final class libraw_sensor_highspeed_crop_t extends ffi.Struct {
  @ushort()
  external int cleft;

  @ushort()
  external int ctop;

  @ushort()
  external int cwidth;

  @ushort()
  external int cheight;
}

final class libraw_hasselblad_makernotes_t extends ffi.Struct {
  @ffi.Int()
  external int BaseISO;

  @ffi.Double()
  external double Gain;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> Sensor;

  /// SU
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> SensorUnit;

  /// HB
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> HostBody;

  @ffi.Int()
  external int SensorCode;

  @ffi.Int()
  external int SensorSubCode;

  @ffi.Int()
  external int CoatingCode;

  @ffi.Int()
  external int uncropped;

  /// CaptureSequenceInitiator is based on the content of the 'model' tag
  /// - values like 'Pinhole', 'Flash Sync', '500 Mech.' etc in .3FR 'model' tag
  /// come from MAIN MENU > SETTINGS > Camera;
  /// - otherwise 'model' contains:
  /// 1. if CF/CFV/CFH, SU enclosure, can be with SU type if '-' is present
  /// 2. else if '-' is present, HB + SU type;
  /// 3. HB;
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> CaptureSequenceInitiator;

  /// SensorUnitConnector, makernotes 0x0015 tag:
  /// - in .3FR - SU side
  /// - in .FFF - HB side
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> SensorUnitConnector;

  /// 3FR, FFF, Imacon (H3D-39 and maybe others), Hasselblad/Phocus DNG, Adobe DNG
  @ffi.Int()
  external int format;

  /// number of IFD containing CM
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> nIFD_CM;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> RecommendedCrop;

  /// mnColorMatrix is in makernotes tag 0x002a;
  /// not present in .3FR files and Imacon/H3D-39 .FFF files;
  /// when present in .FFF and Phocus .DNG files, it is a copy of CM1 from .3FR;
  /// available samples contain all '1's in the first 3 elements
  @ffi.Array.multi([4, 3])
  external ffi.Array<ffi.Array<ffi.Double>> mnColorMatrix;
}

final class libraw_fuji_info_t extends ffi.Struct {
  @ffi.Float()
  external double ExpoMidPointShift;

  @ushort()
  external int DynamicRange;

  @ushort()
  external int FilmMode;

  @ushort()
  external int DynamicRangeSetting;

  @ushort()
  external int DevelopmentDynamicRange;

  @ushort()
  external int AutoDynamicRange;

  @ushort()
  external int DRangePriority;

  @ushort()
  external int DRangePriorityAuto;

  @ushort()
  external int DRangePriorityFixed;

  /// in EV, if =4, raw data * 2^4
  @ffi.Float()
  external double BrightnessCompensation;

  @ushort()
  external int FocusMode;

  @ushort()
  external int AFMode;

  @ffi.Array.multi([2])
  external ffi.Array<ushort> FocusPixel;

  @ushort()
  external int PrioritySettings;

  @ffi.UnsignedInt()
  external int FocusSettings;

  @ffi.UnsignedInt()
  external int AF_C_Settings;

  @ushort()
  external int FocusWarning;

  @ffi.Array.multi([3])
  external ffi.Array<ushort> ImageStabilization;

  @ushort()
  external int FlashMode;

  @ushort()
  external int WB_Preset;

  /// ShutterType:
  /// 0 - mechanical
  /// 1 = electronic
  /// 2 = electronic, long shutter speed
  /// 3 = electronic, front curtain
  @ushort()
  external int ShutterType;

  @ushort()
  external int ExrMode;

  @ushort()
  external int Macro;

  @ffi.UnsignedInt()
  external int Rating;

  /// CropMode:
  /// 1 - FF on GFX,
  /// 2 - sports finder (mechanical shutter),
  /// 4 - 1.25x crop (electronic shutter, continuous high)
  @ushort()
  external int CropMode;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Uint8> SerialSignature;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint8> SensorID;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint8> RAFVersion;

  /// 0 (none), 1..4, 4096
  @ffi.Int()
  external int RAFDataGeneration;

  @ushort()
  external int RAFDataVersion;

  @ffi.Int()
  external int isTSNERDTS;

  /// DriveMode:
  /// 0 - single frame
  /// 1 - continuous low
  /// 2 - continuous high
  @ffi.Short()
  external int DriveMode;

  /// tag 0x4000 BlackLevel:
  /// S9100, S9000, S7000, S6000fd, S5200, S5100, S5000,
  /// S5Pro, S3Pro, S2Pro, S20Pro,
  /// S200EXR, S100FS,
  /// F810, F700,
  /// E900, E550,
  /// DBP, and aliases for all of the above
  @ffi.Array.multi([9])
  external ffi.Array<ushort> BlackLevel;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.UnsignedInt> RAFData_ImageSizeTable;

  @ffi.Int()
  external int AutoBracketing;

  @ffi.Int()
  external int SequenceNumber;

  @ffi.Int()
  external int SeriesLength;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> PixelShiftOffset;

  @ffi.Int()
  external int ImageCount;
}

final class libraw_olympus_makernotes_t extends ffi.Struct {
  @ffi.Array.multi([6])
  external ffi.Array<ffi.Uint8> CameraType2;

  @ushort()
  external int ValidBits;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> SensorCalibration;

  @ffi.Array.multi([5])
  external ffi.Array<ushort> DriveMode;

  @ushort()
  external int ColorSpace;

  @ffi.Array.multi([2])
  external ffi.Array<ushort> FocusMode;

  @ushort()
  external int AutoFocus;

  @ushort()
  external int AFPoint;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.UnsignedInt> AFAreas;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Double> AFPointSelected;

  @ushort()
  external int AFResult;

  @uchar()
  external int AFFineTune;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Short> AFFineTuneAdj;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedInt> SpecialMode;

  @ushort()
  external int ZoomStepCount;

  @ushort()
  external int FocusStepCount;

  @ushort()
  external int FocusStepInfinity;

  @ushort()
  external int FocusStepNear;

  @ffi.Double()
  external double FocusDistance;

  /// left, top, width, height
  @ffi.Array.multi([4])
  external ffi.Array<ushort> AspectFrame;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> StackedImage;

  @uchar()
  external int isLiveND;

  @ffi.UnsignedInt()
  external int LiveNDfactor;

  @ushort()
  external int Panorama_mode;

  @ushort()
  external int Panorama_frameNum;
}

final class libraw_sony_info_t extends ffi.Struct {
  /// init in 0xffff
  @ushort()
  external int CameraType;

  /// 0 if not found/deciphered,
  /// 0xa, 0xb, 0xc following exiftool convention
  @uchar()
  external int Sony0x9400_version;

  @uchar()
  external int Sony0x9400_ReleaseMode2;

  @ffi.UnsignedInt()
  external int Sony0x9400_SequenceImageNumber;

  @uchar()
  external int Sony0x9400_SequenceLength1;

  @ffi.UnsignedInt()
  external int Sony0x9400_SequenceFileNumber;

  @uchar()
  external int Sony0x9400_SequenceLength2;

  /// init in 0xff; +
  @ffi.Uint8()
  external int AFAreaModeSetting;

  /// init in 0xffff; +
  @ffi.Uint16()
  external int AFAreaMode;

  /// init in (0xffff, 0xffff)
  @ffi.Array.multi([2])
  external ffi.Array<ushort> FlexibleSpotPosition;

  /// init in 0xff
  @ffi.Uint8()
  external int AFPointSelected;

  /// init in 0xff
  @ffi.Uint8()
  external int AFPointSelected_0x201e;

  @ffi.Short()
  external int nAFPointsUsed;

  @ffi.Array.multi([10])
  external ffi.Array<ffi.Uint8> AFPointsUsed;

  /// init in 0xff
  @ffi.Uint8()
  external int AFTracking;

  @ffi.Uint8()
  external int AFType;

  @ffi.Array.multi([4])
  external ffi.Array<ushort> FocusLocation;

  /// init in 0xffff
  @ushort()
  external int FocusPosition;

  /// init in 0x7f
  @ffi.Int8()
  external int AFMicroAdjValue;

  /// init in -1
  @ffi.Int8()
  external int AFMicroAdjOn;

  /// init in 0xff
  @uchar()
  external int AFMicroAdjRegisteredLenses;

  @ushort()
  external int VariableLowPassFilter;

  /// init in 0xffffffff
  @ffi.UnsignedInt()
  external int LongExposureNoiseReduction;

  /// init in 0xffff
  @ushort()
  external int HighISONoiseReduction;

  @ffi.Array.multi([2])
  external ffi.Array<ushort> HDR;

  @ushort()
  external int group2010;

  @ushort()
  external int group9050;

  /// init in 0xffff
  @ushort()
  external int real_iso_offset;

  @ushort()
  external int MeteringMode_offset;

  @ushort()
  external int ExposureProgram_offset;

  @ushort()
  external int ReleaseMode2_offset;

  /// init in 0xffffffff
  @ffi.UnsignedInt()
  external int MinoltaCamID;

  @ffi.Float()
  external double firmware;

  /// init in 0xffff
  @ushort()
  external int ImageCount3_offset;

  @ffi.UnsignedInt()
  external int ImageCount3;

  /// init in 0xffffffff
  @ffi.UnsignedInt()
  external int ElectronicFrontCurtainShutter;

  @ushort()
  external int MeteringMode2;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Uint8> SonyDateTime;

  @ffi.UnsignedInt()
  external int ShotNumberSincePowerUp;

  @ushort()
  external int PixelShiftGroupPrefix;

  @ffi.UnsignedInt()
  external int PixelShiftGroupID;

  @ffi.Uint8()
  external int nShotsInPixelShiftGroup;

  /// '0' if ARQ, first shot in the group has '1'
  /// here
  @ffi.Uint8()
  external int numInPixelShiftGroup;

  @ushort()
  external int prd_ImageHeight;

  @ushort()
  external int prd_ImageWidth;

  @ushort()
  external int prd_Total_bps;

  @ushort()
  external int prd_Active_bps;

  /// 82 -> Padded; 89 -> Linear
  @ushort()
  external int prd_StorageMethod;

  /// 0 -> not valid; 1 -> RGGB; 4 -> GBRG
  @ushort()
  external int prd_BayerPattern;

  /// init in 0xffff
  /// valid for ARW 2.0 and up (FileFormat >= 3000)
  /// takes precedence over RAWFileType and Quality:
  /// 0  for uncompressed 14-bit raw
  /// 1  for uncompressed 12-bit raw
  /// 2  for compressed raw (lossy)
  /// 3  for lossless compressed raw
  /// 4  for lossless compressed raw v.2 (ILCE-1)
  @ushort()
  external int SonyRawFileType;

  /// init in 0xffff
  /// takes precedence over Quality
  /// 0 for compressed raw,
  /// 1 for uncompressed;
  /// 2 lossless compressed raw v.2
  @ushort()
  external int RAWFileType;

  /// init in 0xffff
  /// 1 - large,
  /// 2 - small,
  /// 3 - medium
  @ushort()
  external int RawSizeType;

  /// init in 0xffffffff
  /// 0 or 6 for raw, 7 or 8 for compressed raw
  @ffi.UnsignedInt()
  external int Quality;

  /// 1000 SR2
  /// 2000 ARW 1.0
  /// 3000 ARW 2.0
  /// 3100 ARW 2.1
  /// 3200 ARW 2.2
  /// 3300 ARW 2.3
  /// 3310 ARW 2.3.1
  /// 3320 ARW 2.3.2
  /// 3330 ARW 2.3.3
  /// 3350 ARW 2.3.5
  /// 4000 ARW 4.0
  @ushort()
  external int FileFormat;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> MetaVersion;
}

final class libraw_kodak_makernotes_t extends ffi.Struct {
  @ushort()
  external int BlackLevelTop;

  @ushort()
  external int BlackLevelBottom;

  /// KDC files, negative values or zeros
  @ffi.Short()
  external int offset_left;

  @ffi.Short()
  external int offset_top;

  /// valid for P712, P850, P880
  @ushort()
  external int clipBlack;

  @ushort()
  external int clipWhite;

  @ffi.Array.multi([3, 3])
  external ffi.Array<ffi.Array<ffi.Float>> romm_camDaylight;

  @ffi.Array.multi([3, 3])
  external ffi.Array<ffi.Array<ffi.Float>> romm_camTungsten;

  @ffi.Array.multi([3, 3])
  external ffi.Array<ffi.Array<ffi.Float>> romm_camFluorescent;

  @ffi.Array.multi([3, 3])
  external ffi.Array<ffi.Array<ffi.Float>> romm_camFlash;

  @ffi.Array.multi([3, 3])
  external ffi.Array<ffi.Array<ffi.Float>> romm_camCustom;

  @ffi.Array.multi([3, 3])
  external ffi.Array<ffi.Array<ffi.Float>> romm_camAuto;

  @ushort()
  external int val018percent;

  @ushort()
  external int val100percent;

  @ushort()
  external int val170percent;

  @ffi.Short()
  external int MakerNoteKodak8a;

  @ffi.Float()
  external double ISOCalibrationGain;

  @ffi.Float()
  external double AnalogISO;
}

final class libraw_panasonic_makernotes_t extends ffi.Struct {
  /// Compression:
  /// 34826 (Panasonic RAW 2): LEICA DIGILUX 2;
  /// 34828 (Panasonic RAW 3): LEICA D-LUX 3; LEICA V-LUX 1; Panasonic DMC-LX1;
  /// Panasonic DMC-LX2; Panasonic DMC-FZ30; Panasonic DMC-FZ50; 34830 (not in
  /// exiftool): LEICA DIGILUX 3; Panasonic DMC-L1; 34316 (Panasonic RAW 1):
  /// others (LEICA, Panasonic, YUNEEC);
  @ushort()
  external int Compression;

  @ushort()
  external int BlackLevelDim;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Float> BlackLevel;

  /// 0 is Off, 65536 is Pixel Shift
  @ffi.UnsignedInt()
  external int Multishot;

  @ffi.Float()
  external double gamma;

  /// 0->R, 1->G, 2->B
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Int> HighISOMultiplier;

  @ffi.Short()
  external int FocusStepNear;

  @ffi.Short()
  external int FocusStepCount;

  @ffi.UnsignedInt()
  external int ZoomPosition;

  @ffi.UnsignedInt()
  external int LensManufacturer;
}

final class libraw_pentax_makernotes_t extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<uchar> DriveMode;

  @ffi.Array.multi([2])
  external ffi.Array<ushort> FocusMode;

  @ffi.Array.multi([2])
  external ffi.Array<ushort> AFPointSelected;

  @ushort()
  external int AFPointSelected_Area;

  @ffi.Int()
  external int AFPointsInFocus_version;

  @ffi.UnsignedInt()
  external int AFPointsInFocus;

  @ushort()
  external int FocusPosition;

  @ffi.Short()
  external int AFAdjustment;

  @uchar()
  external int AFPointMode;

  /// last bit is not "1" if ME is not used
  @uchar()
  external int MultiExposure;

  /// 4 is raw, 7 is raw w/ pixel shift, 8 is raw w/ dynamic
  /// pixel shift
  @ushort()
  external int Quality;
}

final class libraw_p1_makernotes_t extends ffi.Struct {
  /// tag 0x0203
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> Software;

  /// tag 0x0204
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> SystemType;

  /// tag 0x0301
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Uint8> FirmwareString;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> SystemModel;
}

final class libraw_ricoh_makernotes_t extends ffi.Struct {
  @ushort()
  external int AFStatus;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> AFAreaXPosition;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> AFAreaYPosition;

  @ushort()
  external int AFAreaMode;

  @ffi.UnsignedInt()
  external int SensorWidth;

  @ffi.UnsignedInt()
  external int SensorHeight;

  @ffi.UnsignedInt()
  external int CroppedImageWidth;

  @ffi.UnsignedInt()
  external int CroppedImageHeight;

  @ushort()
  external int WideAdapter;

  @ushort()
  external int CropMode;

  @ushort()
  external int NDFilter;

  @ushort()
  external int AutoBracketing;

  @ushort()
  external int MacroMode;

  @ushort()
  external int FlashMode;

  @ffi.Double()
  external double FlashExposureComp;

  @ffi.Double()
  external double ManualFlashOutput;
}

final class libraw_samsung_makernotes_t extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedInt> ImageSizeFull;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedInt> ImageSizeCrop;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> ColorSpace;

  @ffi.Array.multi([11])
  external ffi.Array<ffi.UnsignedInt> key;

  /// PostAEGain, digital stretch
  @ffi.Double()
  external double DigitalGain;

  @ffi.Int()
  external int DeviceType;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> LensFirmware;
}

final class libraw_metadata_common_t extends ffi.Struct {
  @ffi.Float()
  external double FlashEC;

  @ffi.Float()
  external double FlashGN;

  @ffi.Float()
  external double CameraTemperature;

  @ffi.Float()
  external double SensorTemperature;

  @ffi.Float()
  external double SensorTemperature2;

  @ffi.Float()
  external double LensTemperature;

  @ffi.Float()
  external double AmbientTemperature;

  @ffi.Float()
  external double BatteryTemperature;

  @ffi.Float()
  external double exifAmbientTemperature;

  @ffi.Float()
  external double exifHumidity;

  @ffi.Float()
  external double exifPressure;

  @ffi.Float()
  external double exifWaterDepth;

  @ffi.Float()
  external double exifAcceleration;

  @ffi.Float()
  external double exifCameraElevationAngle;

  @ffi.Float()
  external double real_ISO;

  @ffi.Float()
  external double exifExposureIndex;

  @ushort()
  external int ColorSpace;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> firmware;

  @ffi.Float()
  external double ExposureCalibrationShift;

  @ffi.Array.multi([4])
  external ffi.Array<libraw_afinfo_item_t> afdata;

  @ffi.Int()
  external int afcount;
}

final class libraw_afinfo_item_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int AFInfoData_tag;

  @ffi.Short()
  external int AFInfoData_order;

  @ffi.UnsignedInt()
  external int AFInfoData_version;

  @ffi.UnsignedInt()
  external int AFInfoData_length;

  external ffi.Pointer<uchar> AFInfoData;
}

final class libraw_shootinginfo_t extends ffi.Struct {
  @ffi.Short()
  external int DriveMode;

  @ffi.Short()
  external int FocusMode;

  @ffi.Short()
  external int MeteringMode;

  @ffi.Short()
  external int AFPoint;

  @ffi.Short()
  external int ExposureMode;

  @ffi.Short()
  external int ExposureProgram;

  @ffi.Short()
  external int ImageStabilization;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> BodySerial;

  /// this may be PCB or sensor serial, depends on
  /// make/model
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> InternalBodySerial;
}

final class libraw_output_params_t extends ffi.Struct {
  /// -A  x1 y1 x2 y2
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedInt> greybox;

  /// -B x1 y1 x2 y2
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedInt> cropbox;

  /// -C
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> aber;

  /// -g
  @ffi.Array.multi([6])
  external ffi.Array<ffi.Double> gamm;

  /// -r mul0 mul1 mul2 mul3
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> user_mul;

  /// -b
  @ffi.Float()
  external double bright;

  /// -n
  @ffi.Float()
  external double threshold;

  /// -h
  @ffi.Int()
  external int half_size;

  /// -f
  @ffi.Int()
  external int four_color_rgb;

  /// -H
  @ffi.Int()
  external int highlight;

  /// -a
  @ffi.Int()
  external int use_auto_wb;

  /// -w
  @ffi.Int()
  external int use_camera_wb;

  /// +M/-M
  @ffi.Int()
  external int use_camera_matrix;

  /// -o
  @ffi.Int()
  external int output_color;

  /// -o
  external ffi.Pointer<ffi.Uint8> output_profile;

  /// -p
  external ffi.Pointer<ffi.Uint8> camera_profile;

  /// -P
  external ffi.Pointer<ffi.Uint8> bad_pixels;

  /// -K
  external ffi.Pointer<ffi.Uint8> dark_frame;

  /// -4
  @ffi.Int()
  external int output_bps;

  /// -T
  @ffi.Int()
  external int output_tiff;

  @ffi.Int()
  external int output_flags;

  /// -t
  @ffi.Int()
  external int user_flip;

  /// -q
  @ffi.Int()
  external int user_qual;

  /// -k
  @ffi.Int()
  external int user_black;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int> user_cblack;

  /// -S
  @ffi.Int()
  external int user_sat;

  /// -m
  @ffi.Int()
  external int med_passes;

  @ffi.Float()
  external double auto_bright_thr;

  @ffi.Float()
  external double adjust_maximum_thr;

  /// -W
  @ffi.Int()
  external int no_auto_bright;

  /// -j
  @ffi.Int()
  external int use_fuji_rotate;

  @ffi.Int()
  external int green_matching;

  /// DCB parameters
  @ffi.Int()
  external int dcb_iterations;

  @ffi.Int()
  external int dcb_enhance_fl;

  @ffi.Int()
  external int fbdd_noiserd;

  @ffi.Int()
  external int exp_correc;

  @ffi.Float()
  external double exp_shift;

  @ffi.Float()
  external double exp_preser;

  /// Disable Auto-scale
  @ffi.Int()
  external int no_auto_scale;

  /// Disable intepolation
  @ffi.Int()
  external int no_interpolation;
}

final class libraw_raw_unpack_params_t extends ffi.Struct {
  /// Raw speed
  @ffi.Int()
  external int use_rawspeed;

  /// DNG SDK
  @ffi.Int()
  external int use_dngsdk;

  @ffi.UnsignedInt()
  external int options;

  /// -s
  @ffi.UnsignedInt()
  external int shot_select;

  @ffi.UnsignedInt()
  external int specials;

  @ffi.UnsignedInt()
  external int max_raw_memory_mb;

  @ffi.Int()
  external int sony_arw2_posterization_thr;

  /// Nikon Coolscan
  @ffi.Float()
  external double coolscan_nef_gamma;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint8> p4shot_order;

  /// Custom camera list
  external ffi.Pointer<ffi.Pointer<ffi.Uint8>> custom_camera_strings;
}

final class libraw_colordata_t extends ffi.Struct {
  @ffi.Array.multi([65536])
  external ffi.Array<ushort> curve;

  @ffi.Array.multi([4104])
  external ffi.Array<ffi.UnsignedInt> cblack;

  @ffi.UnsignedInt()
  external int black;

  @ffi.UnsignedInt()
  external int data_maximum;

  @ffi.UnsignedInt()
  external int maximum;

  /// Canon (SpecularWhiteLevel)
  /// Kodak (14N, 14nx, SLR/c/n, DCS720X, DCS760C, DCS760M, ProBack, ProBack645, P712, P880, P850)
  /// Olympus, except:
  /// C5050Z, C5060WZ, C7070WZ, C8080WZ
  /// SP350, SP500UZ, SP510UZ, SP565UZ
  /// E-10, E-20
  /// E-300, E-330, E-400, E-410, E-420, E-450, E-500, E-510, E-520
  /// E-1, E-3
  /// XZ-1
  /// Panasonic
  /// Pentax
  /// Sony
  /// and aliases of the above
  /// DNG
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Long> linear_max;

  @ffi.Float()
  external double fmaximum;

  @ffi.Float()
  external double fnorm;

  @ffi.Array.multi([8, 8])
  external ffi.Array<ffi.Array<ushort>> white;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> cam_mul;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> pre_mul;

  @ffi.Array.multi([3, 4])
  external ffi.Array<ffi.Array<ffi.Float>> cmatrix;

  @ffi.Array.multi([3, 4])
  external ffi.Array<ffi.Array<ffi.Float>> ccm;

  @ffi.Array.multi([3, 4])
  external ffi.Array<ffi.Array<ffi.Float>> rgb_cam;

  @ffi.Array.multi([4, 3])
  external ffi.Array<ffi.Array<ffi.Float>> cam_xyz;

  external ph1_t phase_one_data;

  @ffi.Float()
  external double flash_used;

  @ffi.Float()
  external double canon_ev;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> model2;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> UniqueCameraModel;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> LocalizedCameraModel;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> ImageUniqueID;

  @ffi.Array.multi([17])
  external ffi.Array<ffi.Uint8> RawDataUniqueID;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> OriginalRawFileName;

  external ffi.Pointer<ffi.Void> profile;

  @ffi.UnsignedInt()
  external int profile_length;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedInt> black_stat;

  @ffi.Array.multi([2])
  external ffi.Array<libraw_dng_color_t> dng_color;

  external libraw_dng_levels_t dng_levels;

  /// R, G1, B, G2 coeffs
  @ffi.Array.multi([256, 4])
  external ffi.Array<ffi.Array<ffi.Int>> WB_Coeffs;

  /// CCT, than R, G1, B, G2 coeffs
  @ffi.Array.multi([64, 5])
  external ffi.Array<ffi.Array<ffi.Float>> WBCT_Coeffs;

  @ffi.Int()
  external int as_shot_wb_applied;

  @ffi.Array.multi([2])
  external ffi.Array<libraw_P1_color_t> P1_color;

  /// for Phase One: raw format; For other cameras: bits per pixel (copy of tiff_bps in most cases) */
  /// /* Phase One raw format values, makernotes tag 0x010e:
  /// 0    Name unknown
  /// 1    "RAW 1"
  /// 2    "RAW 2"
  /// 3    "IIQ L" (IIQ L14)
  /// 4    Never seen
  /// 5    "IIQ S"
  /// 6    "IIQ Sv2" (S14 / S14+)
  /// 7    Never seen
  /// 8    "IIQ L16" (IIQ L16EX / IIQ L16)
  @ffi.UnsignedInt()
  external int raw_bps;

  @ffi.Int()
  external int ExifColorSpace;
}

final class ph1_t extends ffi.Struct {
  @ffi.Int()
  external int format;

  @ffi.Int()
  external int key_off;

  @ffi.Int()
  external int tag_21a;

  @ffi.Int()
  external int t_black;

  @ffi.Int()
  external int split_col;

  @ffi.Int()
  external int black_col;

  @ffi.Int()
  external int split_row;

  @ffi.Int()
  external int black_row;

  @ffi.Float()
  external double tag_210;
}

final class libraw_dng_color_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int parsedfields;

  @ushort()
  external int illuminant;

  @ffi.Array.multi([4, 4])
  external ffi.Array<ffi.Array<ffi.Float>> calibration;

  @ffi.Array.multi([4, 3])
  external ffi.Array<ffi.Array<ffi.Float>> colormatrix;

  @ffi.Array.multi([3, 4])
  external ffi.Array<ffi.Array<ffi.Float>> forwardmatrix;
}

final class libraw_dng_levels_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int parsedfields;

  @ffi.Array.multi([4104])
  external ffi.Array<ffi.UnsignedInt> dng_cblack;

  @ffi.UnsignedInt()
  external int dng_black;

  @ffi.Array.multi([4104])
  external ffi.Array<ffi.Float> dng_fcblack;

  @ffi.Float()
  external double dng_fblack;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedInt> dng_whitelevel;

  /// Origin and size
  @ffi.Array.multi([4])
  external ffi.Array<ushort> default_crop;

  /// top-left-bottom-right relative to default_crop
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> user_crop;

  @ffi.UnsignedInt()
  external int preview_colorspace;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> analogbalance;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> asshotneutral;

  @ffi.Float()
  external double baseline_exposure;

  @ffi.Float()
  external double LinearResponseLimit;
}

final class libraw_P1_color_t extends ffi.Struct {
  @ffi.Array.multi([9])
  external ffi.Array<ffi.Float> romm_cam;
}

final class libraw_imgother_t extends ffi.Struct {
  @ffi.Float()
  external double iso_speed;

  @ffi.Float()
  external double shutter;

  @ffi.Float()
  external double aperture;

  @ffi.Float()
  external double focal_len;

  @time_t()
  external int timestamp;

  @ffi.UnsignedInt()
  external int shot_order;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.UnsignedInt> gpsdata;

  external libraw_gps_info_t parsed_gps;

  @ffi.Array.multi([512])
  external ffi.Array<ffi.Uint8> desc;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> artist;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> analogbalance;
}

typedef time_t = __darwin_time_t;
typedef __darwin_time_t = ffi.Long;
typedef Dart__darwin_time_t = int;

final class libraw_gps_info_t extends ffi.Struct {
  /// Deg,min,sec
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Float> latitude;

  /// Deg,min,sec
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Float> longitude;

  /// Deg,min,sec
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Float> gpstimestamp;

  @ffi.Float()
  external double altitude;

  @ffi.Uint8()
  external int altref;

  @ffi.Uint8()
  external int latref;

  @ffi.Uint8()
  external int longref;

  @ffi.Uint8()
  external int gpsstatus;

  @ffi.Uint8()
  external int gpsparsed;
}

final class libraw_thumbnail_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int tformat;

  @ushort()
  external int twidth;

  @ushort()
  external int theight;

  @ffi.UnsignedInt()
  external int tlength;

  @ffi.Int()
  external int tcolors;

  external ffi.Pointer<ffi.Uint8> thumb;
}

enum LibRaw_thumbnail_formats {
  LIBRAW_THUMBNAIL_UNKNOWN(0),
  LIBRAW_THUMBNAIL_JPEG(1),
  LIBRAW_THUMBNAIL_BITMAP(2),
  LIBRAW_THUMBNAIL_BITMAP16(3),
  LIBRAW_THUMBNAIL_LAYER(4),
  LIBRAW_THUMBNAIL_ROLLEI(5),
  LIBRAW_THUMBNAIL_H265(6);

  final int value;
  const LibRaw_thumbnail_formats(this.value);

  static LibRaw_thumbnail_formats fromValue(int value) => switch (value) {
        0 => LIBRAW_THUMBNAIL_UNKNOWN,
        1 => LIBRAW_THUMBNAIL_JPEG,
        2 => LIBRAW_THUMBNAIL_BITMAP,
        3 => LIBRAW_THUMBNAIL_BITMAP16,
        4 => LIBRAW_THUMBNAIL_LAYER,
        5 => LIBRAW_THUMBNAIL_ROLLEI,
        6 => LIBRAW_THUMBNAIL_H265,
        _ => throw ArgumentError(
            "Unknown value for LibRaw_thumbnail_formats: $value"),
      };
}

final class libraw_thumbnail_list_t extends ffi.Struct {
  @ffi.Int()
  external int thumbcount;

  @ffi.Array.multi([8])
  external ffi.Array<libraw_thumbnail_item_t> thumblist;
}

final class libraw_thumbnail_item_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int tformat;

  @ushort()
  external int twidth;

  @ushort()
  external int theight;

  @ushort()
  external int tflip;

  @ffi.UnsignedInt()
  external int tlength;

  @ffi.UnsignedInt()
  external int tmisc;

  @INT64()
  external int toffset;
}

enum LibRaw_internal_thumbnail_formats {
  LIBRAW_INTERNAL_THUMBNAIL_UNKNOWN(0),
  LIBRAW_INTERNAL_THUMBNAIL_KODAK_THUMB(1),
  LIBRAW_INTERNAL_THUMBNAIL_KODAK_YCBCR(2),
  LIBRAW_INTERNAL_THUMBNAIL_KODAK_RGB(3),
  LIBRAW_INTERNAL_THUMBNAIL_JPEG(4),
  LIBRAW_INTERNAL_THUMBNAIL_LAYER(5),
  LIBRAW_INTERNAL_THUMBNAIL_ROLLEI(6),
  LIBRAW_INTERNAL_THUMBNAIL_PPM(7),
  LIBRAW_INTERNAL_THUMBNAIL_PPM16(8),
  LIBRAW_INTERNAL_THUMBNAIL_X3F(9);

  final int value;
  const LibRaw_internal_thumbnail_formats(this.value);

  static LibRaw_internal_thumbnail_formats fromValue(int value) =>
      switch (value) {
        0 => LIBRAW_INTERNAL_THUMBNAIL_UNKNOWN,
        1 => LIBRAW_INTERNAL_THUMBNAIL_KODAK_THUMB,
        2 => LIBRAW_INTERNAL_THUMBNAIL_KODAK_YCBCR,
        3 => LIBRAW_INTERNAL_THUMBNAIL_KODAK_RGB,
        4 => LIBRAW_INTERNAL_THUMBNAIL_JPEG,
        5 => LIBRAW_INTERNAL_THUMBNAIL_LAYER,
        6 => LIBRAW_INTERNAL_THUMBNAIL_ROLLEI,
        7 => LIBRAW_INTERNAL_THUMBNAIL_PPM,
        8 => LIBRAW_INTERNAL_THUMBNAIL_PPM16,
        9 => LIBRAW_INTERNAL_THUMBNAIL_X3F,
        _ => throw ArgumentError(
            "Unknown value for LibRaw_internal_thumbnail_formats: $value"),
      };
}

typedef INT64 = ffi.LongLong;
typedef DartINT64 = int;

final class libraw_rawdata_t extends ffi.Struct {
  /// really allocated bitmap
  external ffi.Pointer<ffi.Void> raw_alloc;

  /// alias to single_channel variant
  external ffi.Pointer<ushort> raw_image;

  /// alias to 4-channel variant
  external ffi.Pointer<ffi.Pointer<ushort>> color4_image;

  /// alias to 3-color variand decoded by RawSpeed
  external ffi.Pointer<ffi.Pointer<ushort>> color3_image;

  /// float bayer
  external ffi.Pointer<ffi.Float> float_image;

  /// float 3-component
  external ffi.Pointer<ffi.Pointer<ffi.Float>> float3_image;

  /// float 4-component
  external ffi.Pointer<ffi.Pointer<ffi.Float>> float4_image;

  /// Phase One black level data;
  external ffi.Pointer<ffi.Pointer<ffi.Short>> ph1_cblack;

  external ffi.Pointer<ffi.Pointer<ffi.Short>> ph1_rblack;

  /// save color and sizes here, too....
  external libraw_iparams_t iparams;

  external libraw_image_sizes_t sizes;

  external libraw_internal_output_params_t ioparams;

  external libraw_colordata_t color;
}

final class libraw_internal_output_params_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int mix_green;

  @ffi.UnsignedInt()
  external int raw_color;

  @ffi.UnsignedInt()
  external int zero_is_bad;

  @ushort()
  external int shrink;

  @ushort()
  external int fuji_width;
}

typedef exif_parser_callback
    = ffi.Pointer<ffi.NativeFunction<exif_parser_callbackFunction>>;
typedef exif_parser_callbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> context,
    ffi.Int tag,
    ffi.Int type,
    ffi.Int len,
    ffi.UnsignedInt ord,
    ffi.Pointer<ffi.Void> ifp,
    INT64 base);
typedef Dartexif_parser_callbackFunction = void Function(
    ffi.Pointer<ffi.Void> context,
    int tag,
    int type,
    int len,
    int ord,
    ffi.Pointer<ffi.Void> ifp,
    DartINT64 base);
typedef data_callback = ffi.Pointer<ffi.NativeFunction<data_callbackFunction>>;
typedef data_callbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> data, ffi.Pointer<ffi.Uint8> file, ffi.Int offset);
typedef Dartdata_callbackFunction = void Function(
    ffi.Pointer<ffi.Void> data, ffi.Pointer<ffi.Uint8> file, int offset);
typedef progress_callback
    = ffi.Pointer<ffi.NativeFunction<progress_callbackFunction>>;
typedef progress_callbackFunction = ffi.Int Function(ffi.Pointer<ffi.Void> data,
    ffi.UnsignedInt stage, ffi.Int iteration, ffi.Int expected);
typedef Dartprogress_callbackFunction = int Function(ffi.Pointer<ffi.Void> data,
    LibRaw_progress stage, int iteration, int expected);

final class libraw_decoder_info_t extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> decoder_name;

  @ffi.UnsignedInt()
  external int decoder_flags;
}

final class libraw_processed_image_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int type;

  @ushort()
  external int height;

  @ushort()
  external int width;

  @ushort()
  external int colors;

  @ushort()
  external int bits;

  @ffi.UnsignedInt()
  external int data_size;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> data;
}

enum LibRaw_image_formats {
  LIBRAW_IMAGE_JPEG(1),
  LIBRAW_IMAGE_BITMAP(2);

  final int value;
  const LibRaw_image_formats(this.value);

  static LibRaw_image_formats fromValue(int value) => switch (value) {
        1 => LIBRAW_IMAGE_JPEG,
        2 => LIBRAW_IMAGE_BITMAP,
        _ =>
          throw ArgumentError("Unknown value for LibRaw_image_formats: $value"),
      };
}
